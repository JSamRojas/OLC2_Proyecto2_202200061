// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/

import Expresion from "../Abstracto/Expresion.js";
import Instruccion from "../Abstracto/Instruccion.js";
import Simbolos from "../Simbolo/Simbolos.js";
import Tipo from "../Simbolo/Tipo.js";
import Nativo from "../Expresiones/Nativo.js";
import DatoNativo from "../Simbolo/DatoNativo.js";
import Expr_Aritmeticas from "../Expresiones/Expr_Aritmeticas.js";
import Expr_Relacionales from "../Expresiones/Expr_Relacionales.js";
import Expr_Logicas from "../Expresiones/Expr_Logicas.js";
import Expr_AccesoVar from "../Expresiones/Expr_AccesoVar.js";
import Expr_AccesoArray from "../Expresiones/Expr_AccesoArray.js";
import Expr_AccesoMatriz from "../Expresiones/Expr_AccesoMatriz.js";
import Expr_AccesoStruct from "../Expresiones/Expr_AccesoStruct.js";
import Expr_Ternaria from "../Expresiones/Expr_Ternaria.js";
import Expr_IndexOf from "../Expresiones/Expr_IndexOf.js";
import Expr_Join from "../Expresiones/Expr_Join.js";
import Expr_Length from "../Expresiones/Expr_Length.js";
import Expr_ParseInt from "../Expresiones/Expr_ParseInt.js";
import Expr_ParseFloat from "../Expresiones/Expr_ParseFloat.js";
import Expr_ToString from "../Expresiones/Expr_ToString.js";
import Expr_ToLowerCase from "../Expresiones/Expr_ToLowerCase.js";
import Expr_ToUpperCase from "../Expresiones/Expr_ToUpperCase.js";
import Expr_TypeOf from "../Expresiones/Expr_TypeOf.js";
import Expr_ObjectKeys from "../Expresiones/Expr_ObjectKeys.js";
import Instr_Sout from "../Instrucciones/Instr_Sout.js";
import Instr_DeclaracionVar from "../Instrucciones/Instr_DeclaracionVar.js";
import Instr_DeclaracionArray from "../Instrucciones/Instr_DeclaracionArray.js";
import Instr_DeclaracionMatriz from "../Instrucciones/Instr_DeclaracionMatriz.js";
import Instr_DeclaracionStruct from "../Instrucciones/Instr_DeclaracionStruct.js";
import Instr_ModificacionVar from "../Instrucciones/Instr_ModificacionVar.js";
import Instr_ModificacionArray from "../Instrucciones/Instr_ModificacionArray.js";
import Instr_ModificacionStruct from "../Instrucciones/Instr_ModificacionStruct.js";
import Instr_Switch from "../Instrucciones/Instr_Switch.js";
import Casos_switch from "../Instrucciones/Casos_switch.js";
import Instr_Break from "../Instrucciones/Instr_Break.js";
import Instr_Continue from "../Instrucciones/Instr_Continue.js";
import Expr_Return from "../Expresiones/Expr_Return.js";
import Instr_While from "../Instrucciones/Instr_While.js";
import Instr_If from "../Instrucciones/Instr_If.js";
import Instr_For from "../Instrucciones/Instr_For.js";
import Instr_ForEach from "../Instrucciones/Instr_ForEach.js";
import Instr_InstanciaStruct from "../Instrucciones/Instr_InstanciaStruct.js";
import Instr_Funcion from "../Instrucciones/Instr_Funcion.js";
import Instr_LlamadaFunc from "../Instrucciones/Instr_LlamadaFunc.js";
import Errores from "../Simbolo/Errores.js";


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { S: peg$parseS };
  var peg$startRuleFunction = peg$parseS;

  var peg$c0 = "(";
  var peg$c1 = ")";
  var peg$c2 = ";";
  var peg$c3 = "{";
  var peg$c4 = "}";
  var peg$c5 = "[";
  var peg$c6 = "]";
  var peg$c7 = ",";
  var peg$c8 = "=";
  var peg$c9 = ":";
  var peg$c10 = ".";
  var peg$c11 = "++";
  var peg$c12 = "--";
  var peg$c13 = "+=";
  var peg$c14 = "-=";
  var peg$c15 = "var";
  var peg$c16 = "?";
  var peg$c17 = "||";
  var peg$c18 = "&&";
  var peg$c19 = "==";
  var peg$c20 = "!=";
  var peg$c21 = "<=";
  var peg$c22 = "<";
  var peg$c23 = ">=";
  var peg$c24 = ">";
  var peg$c25 = "!";
  var peg$c26 = "-";
  var peg$c27 = "int";
  var peg$c28 = "float";
  var peg$c29 = "string";
  var peg$c30 = "boolean";
  var peg$c31 = "char";
  var peg$c32 = "void";
  var peg$c33 = "/*";
  var peg$c34 = "*/";
  var peg$c35 = "//";
  var peg$c36 = "\"";
  var peg$c37 = "\\\"";
  var peg$c38 = "\\\\";
  var peg$c39 = "\\n";
  var peg$c40 = "\\t";
  var peg$c41 = "\\r";
  var peg$c42 = "\\f";
  var peg$c43 = "\\'";
  var peg$c44 = "System.out.println";
  var peg$c45 = "true";
  var peg$c46 = "false";
  var peg$c47 = "null";
  var peg$c48 = "if";
  var peg$c49 = "else";
  var peg$c50 = "switch";
  var peg$c51 = "case";
  var peg$c52 = "default";
  var peg$c53 = "break";
  var peg$c54 = "continue";
  var peg$c55 = "return";
  var peg$c56 = "while";
  var peg$c57 = "for";
  var peg$c58 = "new";
  var peg$c59 = "indexOf";
  var peg$c60 = "join";
  var peg$c61 = "length";
  var peg$c62 = "parseInt";
  var peg$c63 = "parsefloat";
  var peg$c64 = "toString";
  var peg$c65 = "toLowerCase";
  var peg$c66 = "toUpperCase";
  var peg$c67 = "typeof";
  var peg$c68 = "struct";
  var peg$c69 = "Object.keys";

  var peg$r0 = /^[+\-]/;
  var peg$r1 = /^[%*\/]/;
  var peg$r2 = /^[\n\r\u2028\u2029]/;
  var peg$r3 = /^[ \t\n\r]/;
  var peg$r4 = /^[0-9]/;
  var peg$r5 = /^[']/;
  var peg$r6 = /^[^\n']/;
  var peg$r7 = /^[^\\"\n\r]/;
  var peg$r8 = /^[a-zA-Z]/;
  var peg$r9 = /^[0-9A-Z_a-z]/;
  var peg$r10 = /^[a-zA-Z0-9_]/;

  var peg$e0 = peg$literalExpectation("(", false);
  var peg$e1 = peg$literalExpectation(")", false);
  var peg$e2 = peg$literalExpectation(";", false);
  var peg$e3 = peg$literalExpectation("{", false);
  var peg$e4 = peg$literalExpectation("}", false);
  var peg$e5 = peg$literalExpectation("[", false);
  var peg$e6 = peg$literalExpectation("]", false);
  var peg$e7 = peg$literalExpectation(",", false);
  var peg$e8 = peg$literalExpectation("=", false);
  var peg$e9 = peg$literalExpectation(":", false);
  var peg$e10 = peg$literalExpectation(".", false);
  var peg$e11 = peg$literalExpectation("++", false);
  var peg$e12 = peg$literalExpectation("--", false);
  var peg$e13 = peg$literalExpectation("+=", false);
  var peg$e14 = peg$literalExpectation("-=", false);
  var peg$e15 = peg$literalExpectation("var", false);
  var peg$e16 = peg$literalExpectation("?", false);
  var peg$e17 = peg$literalExpectation("||", false);
  var peg$e18 = peg$literalExpectation("&&", false);
  var peg$e19 = peg$literalExpectation("==", false);
  var peg$e20 = peg$literalExpectation("!=", false);
  var peg$e21 = peg$literalExpectation("<=", false);
  var peg$e22 = peg$literalExpectation("<", false);
  var peg$e23 = peg$literalExpectation(">=", false);
  var peg$e24 = peg$literalExpectation(">", false);
  var peg$e25 = peg$classExpectation(["+", "-"], false, false);
  var peg$e26 = peg$classExpectation(["%", "*", "/"], false, false);
  var peg$e27 = peg$literalExpectation("!", false);
  var peg$e28 = peg$literalExpectation("-", false);
  var peg$e29 = peg$literalExpectation("int", false);
  var peg$e30 = peg$literalExpectation("float", false);
  var peg$e31 = peg$literalExpectation("string", false);
  var peg$e32 = peg$literalExpectation("boolean", false);
  var peg$e33 = peg$literalExpectation("char", false);
  var peg$e34 = peg$literalExpectation("void", false);
  var peg$e35 = peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false);
  var peg$e36 = peg$otherExpectation("comentario");
  var peg$e37 = peg$literalExpectation("/*", false);
  var peg$e38 = peg$literalExpectation("*/", false);
  var peg$e39 = peg$anyExpectation();
  var peg$e40 = peg$literalExpectation("//", false);
  var peg$e41 = peg$otherExpectation("Espacio");
  var peg$e42 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  var peg$e43 = peg$otherExpectation("integer");
  var peg$e44 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e45 = peg$otherExpectation("decimal");
  var peg$e46 = peg$otherExpectation("boolean");
  var peg$e47 = peg$otherExpectation("cadena");
  var peg$e48 = peg$literalExpectation("\"", false);
  var peg$e49 = peg$otherExpectation("caracter");
  var peg$e50 = peg$classExpectation(["'"], false, false);
  var peg$e51 = peg$classExpectation(["\n", "'"], true, false);
  var peg$e52 = peg$literalExpectation("\\\"", false);
  var peg$e53 = peg$literalExpectation("\\\\", false);
  var peg$e54 = peg$literalExpectation("\\n", false);
  var peg$e55 = peg$literalExpectation("\\t", false);
  var peg$e56 = peg$literalExpectation("\\r", false);
  var peg$e57 = peg$literalExpectation("\\f", false);
  var peg$e58 = peg$literalExpectation("\\'", false);
  var peg$e59 = peg$classExpectation(["\\", "\"", "\n", "\r"], true, false);
  var peg$e60 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  var peg$e61 = peg$classExpectation([["0", "9"], ["A", "Z"], "_", ["a", "z"]], false, false);
  var peg$e62 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e63 = peg$literalExpectation("System.out.println", false);
  var peg$e64 = peg$literalExpectation("true", false);
  var peg$e65 = peg$literalExpectation("false", false);
  var peg$e66 = peg$literalExpectation("null", false);
  var peg$e67 = peg$literalExpectation("if", false);
  var peg$e68 = peg$literalExpectation("else", false);
  var peg$e69 = peg$literalExpectation("switch", false);
  var peg$e70 = peg$literalExpectation("case", false);
  var peg$e71 = peg$literalExpectation("default", false);
  var peg$e72 = peg$literalExpectation("break", false);
  var peg$e73 = peg$literalExpectation("continue", false);
  var peg$e74 = peg$literalExpectation("return", false);
  var peg$e75 = peg$literalExpectation("while", false);
  var peg$e76 = peg$literalExpectation("for", false);
  var peg$e77 = peg$literalExpectation("new", false);
  var peg$e78 = peg$literalExpectation("indexOf", false);
  var peg$e79 = peg$literalExpectation("join", false);
  var peg$e80 = peg$literalExpectation("length", false);
  var peg$e81 = peg$literalExpectation("parseInt", false);
  var peg$e82 = peg$literalExpectation("parsefloat", false);
  var peg$e83 = peg$literalExpectation("toString", false);
  var peg$e84 = peg$literalExpectation("toLowerCase", false);
  var peg$e85 = peg$literalExpectation("toUpperCase", false);
  var peg$e86 = peg$literalExpectation("typeof", false);
  var peg$e87 = peg$literalExpectation("struct", false);
  var peg$e88 = peg$literalExpectation("Object.keys", false);

  var peg$f0 = function(inst, list) { return [inst].concat(list); };
  var peg$f1 = function(list) { return list; };
  var peg$f2 = function() { return []; };
  var peg$f3 = function(expr) {
  const loc = location()?.start;
  return new Instr_Sout(expr, loc?.line, loc?.column);
  };
  var peg$f4 = function(type, id, params, instr) {
    const loc = location()?.start;
    return new Instr_Funcion(id, null, instr, params, "Variable", type, loc?.line, loc?.column);
    };
  var peg$f5 = function(type, id, params, instr) {
    const loc = location()?.start;
    return new Instr_Funcion(id, null, instr, params, "Array", type, loc?.line, loc?.column);
    };
  var peg$f6 = function(tipofunc, id, params, instr) {
    const loc = location()?.start;
    return new Instr_Funcion(id, tipofunc, instr, params, "Variable", new Tipo(DatoNativo.STRUCT), loc?.line, loc?.column);
    };
  var peg$f7 = function(head, rest) {
    return [head, ...rest.map(r => r[3])];
  };
  var peg$f8 = function() { return []; };
  var peg$f9 = function(type, id) {
    return {identificador: id, tipoDato: type, tipoEstruct: "Variable"};
  };
  var peg$f10 = function(type, id) {
    return {identificador: id, tipoDato: type, tipoEstruct: "Array"};
  };
  var peg$f11 = function(id, params) {
    const loc = location()?.start;
    return new Instr_LlamadaFunc(id, params, false, loc?.line, loc?.column);
  };
  var peg$f12 = function(head, rest) {
    return [head, ...rest.map(r => r[3])];
  };
  var peg$f13 = function() { return []; };
  var peg$f14 = function(id, atrib) {
    const loc = location()?.start;
    let MapaGen = new Map(atrib);
    return new Instr_DeclaracionStruct(id, MapaGen, loc?.line, loc?.column);
  };
  var peg$f15 = function(list) {
    let Mapaux = new Map(list);
    atributosMap.clear();
    return Mapaux;
  };
  var peg$f16 = function(type, id) {atributosMap.set(id, {tipo: type, valor: null});};
  var peg$f17 = function() {
    return atributosMap;
  };
  var peg$f18 = function(idvar, idstruct, valores) {
      const loc = location()?.start;
      return new Instr_InstanciaStruct(idstruct, idvar, valores, loc?.line, loc?.column);
    };
  var peg$f19 = function(idstruct1, idvar, idstuct2, valores) {
      const loc = location()?.start;
      if(idstruct1 !== idstuct2){
        return new Errores("Error Semantico", "No se puede asignar un struct de tipo " + idstuct2 + " a un struct de tipo " + idstruct1, loc?.line, loc?.column);
      }
      return new Instr_InstanciaStruct(idstuct2, idvar, valores, loc?.line, loc?.column);
    };
  var peg$f20 = function(head, rest) {
    return [head, ...rest.map(r => r[3])];
  };
  var peg$f21 = function(clave, valor) {
    return {key: clave, value: valor};
  };
  var peg$f22 = function(idstruct, valores) {
      return [idstruct, [...valores]];
    };
  var peg$f23 = function(head, rest, expr) {
    const loc = location()?.start;
    return new Instr_ModificacionStruct(head, [...rest.map(r => r[3])], expr, loc?.line, loc?.column);
  };
  var peg$f24 = function(decl, cond, mod, instr) {
    const loc = location()?.start;
    return new Instr_For(decl, cond, mod, instr, loc?.line, loc?.column);
    };
  var peg$f25 = function(asig, cond, mod, instr) {
    const loc = location()?.start;
    return new Instr_For(asig, cond, mod, instr, loc?.line, loc?.column);
    };
  var peg$f26 = function(id) {
    const loc = location()?.start;
    return new Instr_ModificacionVar(id, null, MOD_OP.AUMENTO_FOR, loc?.line, loc?.column);
    };
  var peg$f27 = function(id) {
    const loc = location()?.start;
    return new Instr_ModificacionVar(id, null, MOD_OP.DECREMENTO_FOR, loc?.line, loc?.column);
    };
  var peg$f28 = function(id, expr) {
    const loc = location()?.start;
    return new Instr_ModificacionVar(id, expr, null, loc?.line, loc?.column);
    };
  var peg$f29 = function(id, operador, expr) {
    const loc = location()?.start;
    if(operador === "+=") return new Instr_ModificacionVar(id, expr, MOD_OP.AUMENTO, loc?.line, loc?.column);
    else if(operador === "-=") return new Instr_ModificacionVar(id, expr, MOD_OP.DECREMENTO, loc?.line, loc?.column);
  };
  var peg$f30 = function(type, id, id2, instr) {
    const loc = location()?.start;
    return new Instr_ForEach(id, id2, type, instr, loc?.line, loc?.column);
    };
  var peg$f31 = function(cond, instr) {
    const loc = location()?.start;
    return new Instr_While(cond, instr, loc?.line, loc?.column);
  };
  var peg$f32 = function(cond, cases) {
    const loc = location()?.start;
    return new Instr_Switch(cond, cases, loc?.line, loc?.column);
    };
  var peg$f33 = function(cases, list) { return [cases].concat(list); };
  var peg$f34 = function(list) { return list; };
  var peg$f35 = function() { return []; };
  var peg$f36 = function(valor, instr) {
    const loc = location()?.start;
    return new Casos_switch(valor, instr, true, loc?.line, loc?.column);
    };
  var peg$f37 = function(valor) {
    const loc = location()?.start;
    return new Casos_switch(valor, null, true, loc?.line, loc?.column);
    };
  var peg$f38 = function(instr) {
    const loc = location()?.start;
    return new Casos_switch(null, instr, false, loc?.line, loc?.column);
    };
  var peg$f39 = function(condicion, instIF, NextIF) {
    const loc = location()?.start;
    return new Instr_If(condicion, instIF, null, NextIF, loc?.line, loc?.column);
    };
  var peg$f40 = function(condicion, instIF, instELSE) {
    const loc = location()?.start;
    return new Instr_If(condicion, instIF, instELSE, null, loc?.line, loc?.column);
    };
  var peg$f41 = function(condicion, instIF) {
    const loc = location()?.start;
    return new Instr_If(condicion, instIF, null, null, loc?.line, loc?.column);
    };
  var peg$f42 = function(type, cont, id, expr) {
      const loc = location()?.start;
      if(cont === 1){
        return new Instr_DeclaracionArray(id, type, expr, null, null, loc?.line, loc?.column);
      } else {
        return new Instr_DeclaracionMatriz(id, type, expr, null, null, loc?.line, loc?.column);
      }
    };
  var peg$f43 = function(type, cont, id, type2, cant) {
      const loc = location()?.start;
      if(type.getTipo() === type2.getTipo()){
        if(cont === 1 && cont === cant.length){
          return new Instr_DeclaracionArray(id, type, null, [...cant], null, loc?.line, loc?.column);
        } else if(cont > 1 && cont === cant.length){
          return new Instr_DeclaracionMatriz(id, type, null, [...cant], null, loc?.line, loc?.column);
        } else {
          return new Errores("Error Semantico", "La cantidad de corchetes no coincide con la cantidad de dimensiones", loc?.line, loc?.column);
        }
      } else {
        return new Errores("Error Semantico", "No se puede asignar un array de tipo " + type2.getTipo() + " a un array de tipo " + type.getTipo(), loc?.line, loc?.column);
      }
    };
  var peg$f44 = function(type, cont, id, id2) {
      const loc = location()?.start;
      if(cont === 1){
        return new Instr_DeclaracionArray(id, type, null, null, id2, loc?.line, loc?.column);
      } else {
        return new Instr_DeclaracionMatriz(id, type, null, null, id2, loc?.line, loc?.column);
      }
    };
  var peg$f45 = function(id, index, expr) {
    const loc = location()?.start;
    return new Instr_ModificacionArray(id, index, expr, null, loc?.line, loc?.column);
    };
  var peg$f46 = function(id, index, expr) {
    const loc = location()?.start;
    return new Instr_ModificacionArray(id, index, expr, null, loc?.line, loc?.column);
    };
  var peg$f47 = function(id, expr) {
    const loc = location()?.start;
    return new Instr_ModificacionVar(id, expr, null, loc?.line, loc?.column);
    };
  var peg$f48 = function(id, operador, expr) {
    const loc = location()?.start;
    if(operador === "+=") return new Instr_ModificacionVar(id, expr, MOD_OP.AUMENTO, loc?.line, loc?.column);
    else if(operador === "-=") return new Instr_ModificacionVar(id, expr, MOD_OP.DECREMENTO, loc?.line, loc?.column);
    };
  var peg$f49 = function(id, expr) {
    const loc = location()?.start;
    return new Instr_DeclaracionVar(id, expr, new Tipo(DatoNativo.VOID), loc?.line, loc?.column);
    };
  var peg$f50 = function(type, id, expr) {
    const loc = location()?.start;
    return new Instr_DeclaracionVar(id, expr, type, loc?.line, loc?.column);
    };
  var peg$f51 = function(type, id) {
    const loc = location()?.start;
    return new Instr_DeclaracionVar(id, null, type, loc?.line, loc?.column);
    };
  var peg$f52 = function() {
    const loc = location()?.start;
    return new Instr_Break(loc?.line, loc?.column);
  };
  var peg$f53 = function() {
    const loc = location()?.start;
    return new Instr_Continue(loc?.line, loc?.column);
  };
  var peg$f54 = function(expr) {
    const loc = location()?.start;
    return new Expr_Return(expr, loc?.line, loc?.column);
    };
  var peg$f55 = function() {
    const loc = location()?.start;
    return new Expr_Return(null, loc?.line, loc?.column);
    };
  var peg$f56 = function(condicion, verdadero, falso) {
    const loc = location()?.start;
    return new Expr_Ternaria(condicion, verdadero, falso, loc?.line, loc?.column);
  };
  var peg$f57 = function(izq, der) {
    const loc = location()?.start;
    return new Expr_Logicas(null, izq, der, LOGICAL_OP.OR, loc?.line, loc?.column);
  };
  var peg$f58 = function(izq, der) {
    const loc = location()?.start;
    return new Expr_Logicas(null, izq, der, LOGICAL_OP.AND, loc?.line, loc?.column);
  };
  var peg$f59 = function(izq, operador, der) {
    const loc = location()?.start;
    if(operador === "==") return new Expr_Relacionales(izq, der, RELATIONAL_OP.IGUAL, loc?.line, loc?.column);
    else if (operador === "!=") return new Expr_Relacionales(izq, der, RELATIONAL_OP.NO_IGUAL, loc?.line, loc?.column);
  };
  var peg$f60 = function(izq, operador, der) {
    const loc = location()?.start;
    if(operador === "<") return new Expr_Relacionales(izq, der, RELATIONAL_OP.MENOR_QUE, loc?.line, loc?.column);
    else if(operador === "<=") return new Expr_Relacionales(izq, der, RELATIONAL_OP.MENOR_IGUAL, loc?.line, loc?.column);
    else if(operador === ">") return new Expr_Relacionales(izq, der, RELATIONAL_OP.MAYOR_QUE, loc?.line, loc?.column);
    else if(operador === ">=") return new Expr_Relacionales(izq, der, RELATIONAL_OP.MAYOR_IGUAL, loc?.line, loc?.column);
  };
  var peg$f61 = function(izq, tail) {
    return tail.reduce(function(result, element){
      const loc = location()?.start;
      if(element[1] === "+") { return new Expr_Aritmeticas(null, result, element[3], ARITHMETIC_OP.SUMA, loc?.line, loc?.column); }
      else if(element[1] === "-") { return new Expr_Aritmeticas(null, result, element[3], ARITHMETIC_OP.MENOS, loc?.line, loc?.column); }
    }, izq);
  };
  var peg$f62 = function(izq, tail) {
    return tail.reduce(function(result, element){
      const loc = location()?.start;
      if(element[1] === "*") { return new Expr_Aritmeticas(null, result, element[3], ARITHMETIC_OP.MULTIPLICACION, loc?.line, loc?.column); }
      else if(element[1] === "/") { return new Expr_Aritmeticas(null, result, element[3], ARITHMETIC_OP.DIVISION, loc?.line, loc?.column); }
      else if(element[1] === "%") { return new Expr_Aritmeticas(null, result, element[3], ARITHMETIC_OP.MODULO, loc?.line, loc?.column); }
    }, izq);
  };
  var peg$f63 = function(expr) {
    const loc = location()?.start;
    return new Expr_Logicas(expr, null, null, LOGICAL_OP.NOT, loc?.line, loc?.column);
    };
  var peg$f64 = function(expr) { 
    const loc = location()?.start;
    return new Expr_Aritmeticas(expr, null, null, ARITHMETIC_OP.NEGACION, loc?.line, loc?.column); 
    };
  var peg$f65 = function(expr) { return expr; };
  var peg$f66 = function(expr) { return expr; };
  var peg$f67 = function(head, tail) {
    return [head].concat(tail.map(function(element) {return element[3];}));
  };
  var peg$f68 = function(head, rest) {
    return [head, ...rest.map(r => r[3])];
  };
  var peg$f69 = function() { return []; };
  var peg$f70 = function(result) {
    contador = 0;
    return result;
    };
  var peg$f71 = function() {contador += 1;};
  var peg$f72 = function() {
    return contador;
    };
  var peg$f73 = function(result) {
    numeros = [];
    return result;
    };
  var peg$f74 = function(expr) {numeros.push(expr);};
  var peg$f75 = function() {
    return numeros;
  };
  var peg$f76 = function(id, params) {
    const loc = location()?.start;
    return new Instr_LlamadaFunc(id, params, true, loc?.line, loc?.column);
  };
  var peg$f77 = function(valor) {
    const loc = location()?.start;
    return new Nativo(valor, new Tipo(DatoNativo.DECIMAL), loc?.line, loc?.column);
  };
  var peg$f78 = function(valor) {
    const loc = location()?.start;
    return new Nativo(valor, new Tipo(DatoNativo.ENTERO), loc?.line, loc?.column);
  };
  var peg$f79 = function(valor) {
    const loc = location()?.start;
    return new Nativo(valor, new Tipo(DatoNativo.BOOLEANO), loc?.line, loc?.column);
  };
  var peg$f80 = function(valor) {
    const loc = location()?.start;
    return new Nativo(valor, new Tipo(DatoNativo.CADENA), loc?.line, loc?.column);
  };
  var peg$f81 = function(valor) {
    const loc = location()?.start;
    return new Nativo(valor, new Tipo(DatoNativo.CARACTER), loc?.line, loc?.column);
  };
  var peg$f82 = function(id) {
    const loc = location()?.start;
    return new Expr_ObjectKeys(id, loc?.line, loc?.column);
  };
  var peg$f83 = function(expr) {
    const loc = location()?.start;
    return new Expr_ParseFloat(expr, loc?.line, loc?.column);
  };
  var peg$f84 = function(expr) {
    const loc = location()?.start;
    return new Expr_ParseInt(expr, loc?.line, loc?.column);
  };
  var peg$f85 = function(expr) {
    const loc = location()?.start;
    return new Expr_ToString(expr, loc?.line, loc?.column);
  };
  var peg$f86 = function(expr) {
    const loc = location()?.start;
    return new Expr_ToLowerCase(expr, loc?.line, loc?.column);
  };
  var peg$f87 = function(expr) {
    const loc = location()?.start;
    return new Expr_ToUpperCase(expr, loc?.line, loc?.column);
  };
  var peg$f88 = function(expr) {
    const loc = location()?.start;
    return new Expr_TypeOf(expr, loc?.line, loc?.column);
  };
  var peg$f89 = function(valor) {
    const loc = location()?.start;
    return new Expr_Length(valor, loc?.line, loc?.column);
  };
  var peg$f90 = function(valor) {
    const loc = location()?.start;
    return new Expr_Join(valor, loc?.line, loc?.column);
  };
  var peg$f91 = function(valor, expr) {
    const loc = location()?.start;
    return new Expr_IndexOf(valor, expr, loc?.line, loc?.column);
  };
  var peg$f92 = function(valor, pos) {
    const loc = location()?.start;
    if(pos.length === 1){
      return new Expr_AccesoArray(valor, [...pos], loc?.line, loc?.column);
    } else {
      return new Expr_AccesoMatriz(valor, [...pos], loc?.line, loc?.column);
    }
  };
  var peg$f93 = function(id, rest) {
    const loc = location()?.start;
    return new Expr_AccesoStruct(id, [...rest.map(r => r[3])], loc?.line, loc?.column);
  };
  var peg$f94 = function(list) { return list; };
  var peg$f95 = function(valor) {
    const loc = location()?.start;
    return new Expr_AccesoVar(valor, loc?.line, loc?.column);
  };
  var peg$f96 = function(type) {
    if(type[1] === "int") return (new Tipo(DatoNativo.ENTERO));
    else if(type[1] === "float") return (new Tipo(DatoNativo.DECIMAL));
    else if(type[1] === "string") return (new Tipo(DatoNativo.CADENA));
    else if(type[1] === "boolean") return (new Tipo(DatoNativo.BOOLEANO));
    else if(type[1] === "char") return (new Tipo(DatoNativo.CARACTER));
    else if(type[1] === "void") return (new Tipo(DatoNativo.VOID));
  };
  var peg$f97 = function() { return null; };
  var peg$f98 = function() { return parseInt(text(), 10);};
  var peg$f99 = function() { return parseFloat(text()).toFixed(1);};
  var peg$f100 = function() { return true; };
  var peg$f101 = function() { return false; };
  var peg$f102 = function() { var cad = text(); return cad.slice(1,-1); };
  var peg$f103 = function() { var c = text(); return c[1]; };
  var peg$f104 = function() { return "\""; };
  var peg$f105 = function() { return "\\"; };
  var peg$f106 = function() { return "\n"; };
  var peg$f107 = function() { return "\t"; };
  var peg$f108 = function() { return "\r"; };
  var peg$f109 = function() { return "\f"; };
  var peg$f110 = function() { return "'"; };
  var peg$f111 = function() { return text(); };
  var peg$f112 = function() { return text(); };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseS() {
    var s0;

    s0 = peg$parseinstrucciones();

    return s0;
  }

  function peg$parseinstrucciones() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseinstruccion();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseinstruccionesp();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f0(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinstruccionesp() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseinstrucciones();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f1(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseepsilon();
      peg$savedPos = s0;
      s1 = peg$f2();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseinstruccion() {
    var s0;

    s0 = peg$parseprint();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedeclaracion_funcion();
      if (s0 === peg$FAILED) {
        s0 = peg$parsellamada_funcion();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedeclaracion_struct();
          if (s0 === peg$FAILED) {
            s0 = peg$parseinstancia_struct();
            if (s0 === peg$FAILED) {
              s0 = peg$parseasignacion_struct();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedeclaracion_var();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseasignacion_var();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsedeclaracion_array();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseasignacion_array();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseif_else_if();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseswitch_case();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsewhile_state();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsefor_state();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseforeach_state();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsebreak_state();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsecontinue_state();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsereturn_state();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseprint() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseSOUTtoken();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c0;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseexpresion_lista();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s6 = peg$c1;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s8 = peg$c2;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f3(s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedeclaracion_funcion() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    s1 = peg$parsetipo();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c0;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parselista_params();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c1;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 123) {
                s11 = peg$c3;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = peg$parseinstrucciones();
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s15 = peg$c4;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e4); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    peg$savedPos = s0;
                    s0 = peg$f4(s1, s3, s7, s13);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetipo();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 91) {
          s3 = peg$c5;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c6;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseID();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 40) {
                s9 = peg$c0;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s11 = peg$parselista_params();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s13 = peg$c1;
                    peg$currPos++;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e1); }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 123) {
                      s15 = peg$c3;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e3); }
                    }
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      s17 = peg$parseinstrucciones();
                      if (s17 !== peg$FAILED) {
                        s18 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s19 = peg$c4;
                          peg$currPos++;
                        } else {
                          s19 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e4); }
                        }
                        if (s19 !== peg$FAILED) {
                          s20 = peg$parse_();
                          peg$savedPos = s0;
                          s0 = peg$f5(s1, s7, s11, s17);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseID();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseID();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s5 = peg$c0;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parselista_params();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s9 = peg$c1;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s11 = peg$c3;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e3); }
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parse_();
                    s13 = peg$parseinstrucciones();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s15 = peg$c4;
                        peg$currPos++;
                      } else {
                        s15 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e4); }
                      }
                      if (s15 !== peg$FAILED) {
                        s16 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f6(s1, s3, s7, s13);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parselista_params() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseparametro();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c7;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseparametro();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c7;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseparametro();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f7(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseepsilon();
      peg$savedPos = s0;
      s1 = peg$f8();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseparametro() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetipo();
    if (s1 === peg$FAILED) {
      s1 = peg$parseID();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f9(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetipo();
      if (s1 === peg$FAILED) {
        s1 = peg$parseID();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 91) {
          s3 = peg$c5;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c6;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseID();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f10(s1, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsellamada_funcion() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseparametros_funcion();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c2;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f11(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparametros_funcion() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_ternaria();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c7;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseexpresion_ternaria();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c7;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpresion_ternaria();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f12(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseepsilon();
      peg$savedPos = s0;
      s1 = peg$f13();
      s0 = s1;
    }

    return s0;
  }

  function peg$parsedeclaracion_struct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseStructtoken();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseID();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s6 = peg$c3;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parselimpiarMapa();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s10 = peg$c4;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s12 = peg$c2;
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f14(s4, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselimpiarMapa() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parselista_atrib();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselista_atrib() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parse_();
    s4 = peg$parsetipo();
    if (s4 === peg$FAILED) {
      s4 = peg$parseID();
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$parse_();
      s6 = peg$parseID();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s8 = peg$c2;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          peg$savedPos = s2;
          s2 = peg$f16(s4, s6);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parse_();
        s4 = peg$parsetipo();
        if (s4 === peg$FAILED) {
          s4 = peg$parseID();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseID();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s8 = peg$c2;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              peg$savedPos = s2;
              s2 = peg$f16(s4, s6);
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f17();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseinstancia_struct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parseVartoken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s5 = peg$c8;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseID();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c3;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parsevalores_struct();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s13 = peg$c4;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s15 = peg$c2;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e2); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    peg$savedPos = s0;
                    s0 = peg$f18(s3, s7, s11);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseID();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseID();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s5 = peg$c8;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseID();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 123) {
                s9 = peg$c3;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s11 = peg$parsevalores_struct();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s13 = peg$c4;
                    peg$currPos++;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e4); }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s15 = peg$c2;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e2); }
                    }
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      peg$savedPos = s0;
                      s0 = peg$f19(s1, s3, s7, s11);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsevalores_struct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseatributo();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c7;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = peg$parseatributo();
        if (s8 !== peg$FAILED) {
          s5 = [s5, s6, s7, s8];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c7;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseatributo();
          if (s8 !== peg$FAILED) {
            s5 = [s5, s6, s7, s8];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f20(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseatributo() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpr_atrib();
        if (s5 === peg$FAILED) {
          s5 = peg$parseexpresion_ternaria();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f21(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpr_atrib() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c3;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsevalores_struct();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s7 = peg$c4;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f22(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseasignacion_struct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 46) {
        s5 = peg$c10;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseID();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c10;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseID();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c8;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseexpresion_ternaria();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s8 = peg$c2;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f23(s1, s2, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefor_state() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    s1 = peg$parseFortoken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsedeclaracion_var();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpresion_ternaria();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c2;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseact_for();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s13 = peg$c1;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s15 = peg$c3;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e3); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = peg$parseinstrucciones();
                    if (s17 !== peg$FAILED) {
                      s18 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s19 = peg$c4;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e4); }
                      }
                      if (s19 !== peg$FAILED) {
                        s20 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f24(s5, s7, s11, s17);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFortoken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c0;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseasignacion_var();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseexpresion_ternaria();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s9 = peg$c2;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s11 = peg$parseact_for();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s13 = peg$c1;
                    peg$currPos++;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e1); }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 123) {
                      s15 = peg$c3;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e3); }
                    }
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      s17 = peg$parseinstrucciones();
                      if (s17 !== peg$FAILED) {
                        s18 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s19 = peg$c4;
                          peg$currPos++;
                        } else {
                          s19 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e4); }
                        }
                        if (s19 !== peg$FAILED) {
                          s20 = peg$parse_();
                          peg$savedPos = s0;
                          s0 = peg$f25(s5, s7, s11, s17);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseact_for() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c11) {
        s2 = peg$c11;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f26(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseID();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s2 = peg$c12;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f27(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseID();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c8;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseexpresion_ternaria();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f28(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseID();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (input.substr(peg$currPos, 2) === peg$c13) {
              s3 = peg$c13;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c14) {
                s3 = peg$c14;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseexpresion_ternaria();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f29(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseforeach_state() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    s1 = peg$parseFortoken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsetipo();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseID();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 58) {
              s9 = peg$c9;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseID();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s13 = peg$c1;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s15 = peg$c3;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e3); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = peg$parseinstrucciones();
                    if (s17 !== peg$FAILED) {
                      s18 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s19 = peg$c4;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e4); }
                      }
                      if (s19 !== peg$FAILED) {
                        s20 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f30(s5, s7, s11, s17);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhile_state() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseWhiletoken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion_ternaria();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c3;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseinstrucciones();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s13 = peg$c4;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f31(s5, s11);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseswitch_case() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseSwitchtoken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion_ternaria();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c3;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parsecases_switch();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s13 = peg$c4;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f32(s5, s11);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecases_switch() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsecaso();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecasoesp();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f33(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecasoesp() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsecases_switch();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f34(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseepsilon();
      peg$savedPos = s0;
      s1 = peg$f35();
      s0 = s1;
    }

    return s0;
  }

  function peg$parsecaso() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseCasetoken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseexpresion_ternaria();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s5 = peg$c9;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseinstrucciones();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f36(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCasetoken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseexpresion_ternaria();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f37(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDefaulttoken();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c9;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseinstrucciones();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f38(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseif_else_if() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    s0 = peg$currPos;
    s1 = peg$parseIftoken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion_ternaria();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c3;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseinstrucciones();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s13 = peg$c4;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  s15 = peg$parseElsetoken();
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = peg$parseif_else_if();
                    if (s17 !== peg$FAILED) {
                      s18 = peg$parse_();
                      peg$savedPos = s0;
                      s0 = peg$f39(s5, s11, s17);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIftoken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c0;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseexpresion_ternaria();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s7 = peg$c1;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 123) {
                s9 = peg$c3;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s11 = peg$parseinstrucciones();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s13 = peg$c4;
                    peg$currPos++;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e4); }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_();
                    s15 = peg$parseElsetoken();
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 123) {
                        s17 = peg$c3;
                        peg$currPos++;
                      } else {
                        s17 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e3); }
                      }
                      if (s17 !== peg$FAILED) {
                        s18 = peg$parse_();
                        s19 = peg$parseinstrucciones();
                        if (s19 !== peg$FAILED) {
                          s20 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s21 = peg$c4;
                            peg$currPos++;
                          } else {
                            s21 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e4); }
                          }
                          if (s21 !== peg$FAILED) {
                            s22 = peg$parse_();
                            peg$savedPos = s0;
                            s0 = peg$f40(s5, s11, s19);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIftoken();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c0;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseexpresion_ternaria();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s7 = peg$c1;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 123) {
                  s9 = peg$c3;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  s11 = peg$parseinstrucciones();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s13 = peg$c4;
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e4); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      peg$savedPos = s0;
                      s0 = peg$f41(s5, s11);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsedeclaracion_array() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parsetipo();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parselista_corchetes();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseexpresion_array();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s11 = peg$c2;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f42(s1, s3, s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetipo();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parselista_corchetes();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseID();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 61) {
              s7 = peg$c8;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseNewtoken();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s11 = peg$parsetipo();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse_();
                  s13 = peg$parsecorchetes_numeros();
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s15 = peg$c2;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e2); }
                    }
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      peg$savedPos = s0;
                      s0 = peg$f43(s1, s3, s5, s11, s13);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetipo();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parselista_corchetes();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseID();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 61) {
                s7 = peg$c8;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                s9 = peg$parseID();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s11 = peg$c2;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e2); }
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parse_();
                    peg$savedPos = s0;
                    s0 = peg$f44(s1, s3, s5, s9);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseasignacion_array() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsecorchetes_numeros();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s5 = peg$c8;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpresion_ternaria();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c2;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f45(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseID();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parsecorchetes_numeros();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s5 = peg$c8;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseexpresion_array();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s9 = peg$c2;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f46(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseasignacion_var() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion_ternaria();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c2;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f47(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseID();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c13) {
          s3 = peg$c13;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c14) {
            s3 = peg$c14;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseexpresion_ternaria();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s7 = peg$c2;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f48(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedeclaracion_var() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s5 = peg$c8;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpresion_ternaria();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c2;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f49(s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetipo();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseID();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s5 = peg$c8;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseexpresion_ternaria();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s9 = peg$c2;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f50(s1, s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetipo();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseID();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s5 = peg$c2;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f51(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsebreak_state() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseBreaktoken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c2;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f52();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecontinue_state() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseContinuetoken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c2;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f53();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsereturn_state() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseReturntoken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseexpresion_ternaria();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s5 = peg$c2;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f54(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseReturntoken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f55();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseexpresion_ternaria() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_or();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 63) {
        s3 = peg$c16;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion_or();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s7 = peg$c9;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseexpresion_ternaria();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f56(s1, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpresion_or();
    }

    return s0;
  }

  function peg$parseexpresion_or() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_and();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c17) {
        s3 = peg$c17;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion_and();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f57(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpresion_and();
    }

    return s0;
  }

  function peg$parseexpresion_and() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_igualdad();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c18) {
        s3 = peg$c18;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion_igualdad();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f58(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpresion_igualdad();
    }

    return s0;
  }

  function peg$parseexpresion_igualdad() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_relacional();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c19) {
        s3 = peg$c19;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c20) {
          s3 = peg$c20;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion_relacional();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f59(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpresion_relacional();
    }

    return s0;
  }

  function peg$parseexpresion_relacional() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_aditiva();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c21) {
        s3 = peg$c21;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s3 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 60) {
          s3 = peg$c22;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c23) {
            s3 = peg$c23;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s3 = peg$c24;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion_aditiva();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f60(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpresion_aditiva();
    }

    return s0;
  }

  function peg$parseexpresion_aditiva() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_multi();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = input.charAt(peg$currPos);
      if (peg$r0.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseexpresion_multi();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = input.charAt(peg$currPos);
        if (peg$r0.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpresion_multi();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f61(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpresion_multi() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_unaria();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = input.charAt(peg$currPos);
      if (peg$r1.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseexpresion_unaria();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = input.charAt(peg$currPos);
        if (peg$r1.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpresion_unaria();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f62(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpresion_unaria() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 33) {
      s2 = peg$c25;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseexpresion_unaria();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f63(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c26;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseexpresion_primaria();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f64(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpresion_primaria();
      }
    }

    return s0;
  }

  function peg$parseexpresion_primaria() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseexpresion_ternaria();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c1;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f65(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseexpresion_ternaria();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c6;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f66(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseterminal();
      }
    }

    return s0;
  }

  function peg$parseexpresion_array() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevalor_array();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c7;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parsevalor_array();
          if (s9 !== peg$FAILED) {
            s6 = [s6, s7, s8, s9];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parsevalor_array();
            if (s9 !== peg$FAILED) {
              s6 = [s6, s7, s8, s9];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c4;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f67(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpresion_lista() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_ternaria();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c7;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseexpresion_ternaria();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c7;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpresion_ternaria();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f68(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseepsilon();
      peg$savedPos = s0;
      s1 = peg$f69();
      s0 = s1;
    }

    return s0;
  }

  function peg$parselista_corchetes() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parselista_corchetesEsp();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f70(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselista_corchetesEsp() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s4 = peg$c5;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s6 = peg$c6;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        peg$savedPos = s2;
        s2 = peg$f71();
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c5;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s6 = peg$c6;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            peg$savedPos = s2;
            s2 = peg$f71();
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f72();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecorchetes_numeros() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsecorchetes_numerosEsp();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f73(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecorchetes_numerosEsp() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s4 = peg$c5;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$parse_();
      s6 = peg$parseexpresion_ternaria();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s8 = peg$c6;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          peg$savedPos = s2;
          s2 = peg$f74(s6);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c5;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseexpresion_ternaria();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 93) {
              s8 = peg$c6;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              peg$savedPos = s2;
              s2 = peg$f74(s6);
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f75();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecall_func_expr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseparametros_funcion();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f76(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseacces_struct() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c10;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseexpresion_ternaria();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s1 = [s1, s2, s3, s4, s5];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevalor_array() {
    var s0;

    s0 = peg$parseexpresion_array();
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpresion_ternaria();
    }

    return s0;
  }

  function peg$parseterminal() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseDECIMAL();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f77(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseINTEGER();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f78(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBOOLEAN();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f79(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCADENA();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f80(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCARACTER();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f81(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              s2 = peg$parseObjectkeystoken();
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 40) {
                  s4 = peg$c0;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  s6 = peg$parseID();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c1;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e1); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_();
                      peg$savedPos = s0;
                      s0 = peg$f82(s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();
                s2 = peg$parseParsefloattoken();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s4 = peg$c0;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse_();
                    s6 = peg$parseexpresion_ternaria();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s8 = peg$c1;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e1); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f83(s6);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parse_();
                  s2 = peg$parseParseinttoken();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s4 = peg$c0;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parse_();
                      s6 = peg$parseexpresion_ternaria();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s8 = peg$c1;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e1); }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_();
                          peg$savedPos = s0;
                          s0 = peg$f84(s6);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parse_();
                    s2 = peg$parseTostringtoken();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s4 = peg$c0;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        s6 = peg$parseexpresion_ternaria();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s8 = peg$c1;
                            peg$currPos++;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e1); }
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parse_();
                            peg$savedPos = s0;
                            s0 = peg$f85(s6);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parse_();
                      s2 = peg$parseTolowercasetoken();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s4 = peg$c0;
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parse_();
                          s6 = peg$parseexpresion_ternaria();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s8 = peg$c1;
                              peg$currPos++;
                            } else {
                              s8 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e1); }
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parse_();
                              peg$savedPos = s0;
                              s0 = peg$f86(s6);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parse_();
                        s2 = peg$parseTouppercasetoken();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 40) {
                            s4 = peg$c0;
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            s6 = peg$parseexpresion_ternaria();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s8 = peg$c1;
                                peg$currPos++;
                              } else {
                                s8 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e1); }
                              }
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parse_();
                                peg$savedPos = s0;
                                s0 = peg$f87(s6);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parse_();
                          s2 = peg$parseTypeoftoken();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parse_();
                            s4 = peg$parseexpresion_ternaria();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parse_();
                              peg$savedPos = s0;
                              s0 = peg$f88(s4);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseID();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 46) {
                                s3 = peg$c10;
                                peg$currPos++;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e10); }
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parse_();
                                s5 = peg$parseLengthtoken();
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parse_();
                                  peg$savedPos = s0;
                                  s0 = peg$f89(s1);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseID();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parse_();
                                if (input.charCodeAt(peg$currPos) === 46) {
                                  s3 = peg$c10;
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e10); }
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parse_();
                                  s5 = peg$parseJointoken();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (input.charCodeAt(peg$currPos) === 40) {
                                      s7 = peg$c0;
                                      peg$currPos++;
                                    } else {
                                      s7 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parse_();
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s9 = peg$c1;
                                        peg$currPos++;
                                      } else {
                                        s9 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e1); }
                                      }
                                      if (s9 !== peg$FAILED) {
                                        s10 = peg$parse_();
                                        peg$savedPos = s0;
                                        s0 = peg$f90(s1);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseID();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parse_();
                                  if (input.charCodeAt(peg$currPos) === 46) {
                                    s3 = peg$c10;
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e10); }
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parse_();
                                    s5 = peg$parseIndexOftoken();
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parse_();
                                      if (input.charCodeAt(peg$currPos) === 40) {
                                        s7 = peg$c0;
                                        peg$currPos++;
                                      } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                      }
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parse_();
                                        s9 = peg$parseexpresion_ternaria();
                                        if (s9 !== peg$FAILED) {
                                          s10 = peg$parse_();
                                          if (input.charCodeAt(peg$currPos) === 41) {
                                            s11 = peg$c1;
                                            peg$currPos++;
                                          } else {
                                            s11 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e1); }
                                          }
                                          if (s11 !== peg$FAILED) {
                                            s12 = peg$parse_();
                                            peg$savedPos = s0;
                                            s0 = peg$f91(s1, s9);
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseID();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parse_();
                                    s3 = peg$parsecorchetes_numeros();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parse_();
                                      peg$savedPos = s0;
                                      s0 = peg$f92(s1, s3);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parse_();
                                    s2 = peg$parsecall_func_expr();
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$parseID();
                                    }
                                    if (s2 !== peg$FAILED) {
                                      s3 = [];
                                      s4 = peg$currPos;
                                      s5 = peg$parse_();
                                      if (input.charCodeAt(peg$currPos) === 46) {
                                        s6 = peg$c10;
                                        peg$currPos++;
                                      } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e10); }
                                      }
                                      if (s6 !== peg$FAILED) {
                                        s7 = peg$parse_();
                                        s8 = peg$parsecall_func_expr();
                                        if (s8 === peg$FAILED) {
                                          s8 = peg$parseID();
                                        }
                                        if (s8 !== peg$FAILED) {
                                          s5 = [s5, s6, s7, s8];
                                          s4 = s5;
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                      if (s4 !== peg$FAILED) {
                                        while (s4 !== peg$FAILED) {
                                          s3.push(s4);
                                          s4 = peg$currPos;
                                          s5 = peg$parse_();
                                          if (input.charCodeAt(peg$currPos) === 46) {
                                            s6 = peg$c10;
                                            peg$currPos++;
                                          } else {
                                            s6 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e10); }
                                          }
                                          if (s6 !== peg$FAILED) {
                                            s7 = peg$parse_();
                                            s8 = peg$parsecall_func_expr();
                                            if (s8 === peg$FAILED) {
                                              s8 = peg$parseID();
                                            }
                                            if (s8 !== peg$FAILED) {
                                              s5 = [s5, s6, s7, s8];
                                              s4 = s5;
                                            } else {
                                              peg$currPos = s4;
                                              s4 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$FAILED;
                                          }
                                        }
                                      } else {
                                        s3 = peg$FAILED;
                                      }
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parse_();
                                        peg$savedPos = s0;
                                        s0 = peg$f93(s2, s3);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parsecall_func_expr();
                                      if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f94(s1);
                                      }
                                      s0 = s1;
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseID();
                                        if (s1 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$f95(s1);
                                        }
                                        s0 = s1;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetipo() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c27) {
      s3 = peg$c27;
      peg$currPos += 3;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s3 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c28) {
        s3 = peg$c28;
        peg$currPos += 5;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c29) {
          s3 = peg$c29;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c30) {
            s3 = peg$c30;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e32); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c31) {
              s3 = peg$c31;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c32) {
                s3 = peg$c32;
                peg$currPos += 4;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e34); }
              }
            }
          }
        }
      }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s2 = [s2, s3, s4];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f96(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFindeLinea() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

    return s0;
  }

  function peg$parseepsilon() {
    var s0;

    s0 = '';

    return s0;
  }

  function peg$parseComentario() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseComentMultilinea();
    if (s0 === peg$FAILED) {
      s0 = peg$parseComentLinea();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

    return s0;
  }

  function peg$parseComentMultilinea() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c34) {
        s5 = peg$c34;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c34) {
          s5 = peg$c34;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e39); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c34) {
        s3 = peg$c34;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComentLinea() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseFindeLinea();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseFindeLinea();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e39); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseComentario();
    if (s2 === peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r3.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r3.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e42); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseComentario();
      if (s2 === peg$FAILED) {
        s2 = [];
        s3 = input.charAt(peg$currPos);
        if (peg$r3.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = input.charAt(peg$currPos);
            if (peg$r3.test(s3)) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f97();
    s0 = s1;
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e41); }

    return s0;
  }

  function peg$parseINTEGER() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r4.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r4.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f98();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }

    return s0;
  }

  function peg$parseDECIMAL() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r4.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r4.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c10;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r4.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = input.charAt(peg$currPos);
            if (peg$r4.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e44); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f99();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    return s0;
  }

  function peg$parseBOOLEAN() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseTruetoken();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f100();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseFalsetoken();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f101();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }

    return s0;
  }

  function peg$parseCADENA() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c36;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseContenidoCadena();
      if (s4 === peg$FAILED) {
        s4 = peg$parseSecuenciaEscape();
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseContenidoCadena();
        if (s4 === peg$FAILED) {
          s4 = peg$parseSecuenciaEscape();
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s4 = peg$c36;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f102();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

    return s0;
  }

  function peg$parseCARACTER() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r5.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r6.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s2 !== peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (peg$r5.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e50); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f103();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  function peg$parseSecuenciaEscape() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c37) {
      s1 = peg$c37;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f104();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c38) {
        s1 = peg$c38;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e53); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f105();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c39) {
          s1 = peg$c39;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f106();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c40) {
            s1 = peg$c40;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e55); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f107();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c41) {
              s1 = peg$c41;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e56); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f108();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c42) {
                s1 = peg$c42;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e57); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f109();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c43) {
                  s1 = peg$c43;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e58); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f110();
                }
                s0 = s1;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseContenidoCadena() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r7.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r7.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f111();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseID() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsereservadas();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r8.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r9.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r9.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e61); }
          }
        }
        peg$savedPos = s0;
        s0 = peg$f112();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIDparte() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r10.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }

    return s0;
  }

  function peg$parsereservadas() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33;

    s0 = peg$currPos;
    s1 = peg$parseSOUTtoken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTruetoken();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFalsetoken();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseNulltoken();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseInttoken();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseFloattoken();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseStringtoken();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseBooleantoken();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseChartoken();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseVartoken();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseIftoken();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseElsetoken();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parseSwitchtoken();
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parseCasetoken();
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parseDefaulttoken();
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parseBreaktoken();
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parseWhiletoken();
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parseFortoken();
                                      if (s18 !== peg$FAILED) {
                                        s19 = peg$parseNewtoken();
                                        if (s19 !== peg$FAILED) {
                                          s20 = peg$parseContinuetoken();
                                          if (s20 !== peg$FAILED) {
                                            s21 = peg$parseIndexOftoken();
                                            if (s21 !== peg$FAILED) {
                                              s22 = peg$parseJointoken();
                                              if (s22 !== peg$FAILED) {
                                                s23 = peg$parseLengthtoken();
                                                if (s23 !== peg$FAILED) {
                                                  s24 = peg$parseParseinttoken();
                                                  if (s24 !== peg$FAILED) {
                                                    s25 = peg$parseParsefloattoken();
                                                    if (s25 !== peg$FAILED) {
                                                      s26 = peg$parseTostringtoken();
                                                      if (s26 !== peg$FAILED) {
                                                        s27 = peg$parseTolowercasetoken();
                                                        if (s27 !== peg$FAILED) {
                                                          s28 = peg$parseTouppercasetoken();
                                                          if (s28 !== peg$FAILED) {
                                                            s29 = peg$parseTypeoftoken();
                                                            if (s29 !== peg$FAILED) {
                                                              s30 = peg$parseStructtoken();
                                                              if (s30 !== peg$FAILED) {
                                                                s31 = peg$parseObjectkeystoken();
                                                                if (s31 !== peg$FAILED) {
                                                                  s32 = peg$parseVoidtoken();
                                                                  if (s32 !== peg$FAILED) {
                                                                    s33 = peg$parseReturntoken();
                                                                    if (s33 !== peg$FAILED) {
                                                                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33];
                                                                      s0 = s1;
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSOUTtoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c44) {
      s1 = peg$c44;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTruetoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c45) {
      s1 = peg$c45;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFalsetoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c46) {
      s1 = peg$c46;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNulltoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInttoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFloattoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStringtoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBooleantoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseChartoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVoidtoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVartoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIftoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c48) {
      s1 = peg$c48;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseElsetoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c49) {
      s1 = peg$c49;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSwitchtoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c50) {
      s1 = peg$c50;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCasetoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c51) {
      s1 = peg$c51;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDefaulttoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c52) {
      s1 = peg$c52;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBreaktoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c53) {
      s1 = peg$c53;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseContinuetoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c54) {
      s1 = peg$c54;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReturntoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhiletoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c56) {
      s1 = peg$c56;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFortoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c57) {
      s1 = peg$c57;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNewtoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c58) {
      s1 = peg$c58;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIndexOftoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c59) {
      s1 = peg$c59;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJointoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c60) {
      s1 = peg$c60;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLengthtoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c61) {
      s1 = peg$c61;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParseinttoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParsefloattoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c63) {
      s1 = peg$c63;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTostringtoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c64) {
      s1 = peg$c64;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTolowercasetoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c65) {
      s1 = peg$c65;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTouppercasetoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c66) {
      s1 = peg$c66;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeoftoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c67) {
      s1 = peg$c67;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructtoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c68) {
      s1 = peg$c68;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectkeystoken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c69) {
      s1 = peg$c69;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseID();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


  const ARITHMETIC_OP = {
    SUMA: "SUMA",
    MENOS: "MENOS",
    MULTIPLICACION: "MULTIPLICACION",
    DIVISION: "DIVISION",
    MODULO: "MODULO",
    NEGACION: "NEGACION",
  };

  const RELATIONAL_OP = {
    MENOR_QUE: "MENOR_QUE",
    MENOR_IGUAL: "MENOR_IGUAL",
    MAYOR_QUE: "MAYOR_QUE",
    MAYOR_IGUAL: "MAYOR_IGUAL",
    IGUAL: "IGUAL",
    NO_IGUAL: "NO_IGUAL",
  };

  const LOGICAL_OP = {
    AND: "AND",
    OR: "OR",
    NOT: "NOT",
  };

  const MOD_OP = {
    AUMENTO: "AUMENTO",
    DECREMENTO: "DECREMENTO",
    AUMENTO_FOR: "AUMENTO_FOR",
    DECREMENTO_FOR: "DECREMENTO_FOR",
  };

  let contador = 0;
  let numeros = [];
  let atributosMap = new Map();


  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "S"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
